import{aT as l,aU as w,aV as y,aW as p,aX as h,aY as g,aZ as k,a_ as O,a$ as L,b0 as m,b1 as E}from"./App.ad14175d.js";import"./index.12efa584.js";import"./preload-helper.cf010ec4.js";class x extends l{constructor({callbackSelector:e,cause:a,data:o,extraData:n,sender:c,urls:s}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",s&&["  Gateway URL(s):",...s.map(d=>`    ${w(d)}`)],`  Sender: ${c}`,`  Data: ${o}`,`  Callback selector: ${e}`,`  Extra data: ${n}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class M extends l{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${w(a)}`,`Response: ${y(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class $ extends l{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}function R(t,e){if(!p(t))throw new h({address:t});if(!p(e))throw new h({address:e});return t.toLowerCase()===e.toLowerCase()}const T="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function j(t,{blockNumber:e,blockTag:a,data:o,to:n}){const{args:c}=g({data:o,abi:[S]}),[s,d,r,i,f]=c;try{if(!R(n,s))throw new $({sender:s,to:n});const u=await A({data:r,sender:s,urls:d}),{data:b}=await k(t,{blockNumber:e,blockTag:a,data:O([i,L([{type:"bytes"},{type:"bytes"}],[u,f])]),to:n});return b}catch(u){throw new x({callbackSelector:i,cause:u,data:o,extraData:f,sender:s,urls:d})}}async function A({data:t,sender:e,urls:a}){let o=new Error("An unknown error occurred.");for(let n=0;n<a.length;n++){const c=a[n],s=c.includes("{data}")?"GET":"POST",d=s==="POST"?{data:t,sender:e}:void 0;try{const r=await fetch(c.replace("{sender}",e).replace("{data}",t),{body:JSON.stringify(d),method:s});let i;if(r.headers.get("Content-Type")?.startsWith("application/json")?i=(await r.json()).data:i=await r.text(),!r.ok){o=new m({body:d,details:y(i.error)||r.statusText,headers:r.headers,status:r.status,url:c});continue}if(!E(i)){o=new M({result:i,url:c});continue}return i}catch(r){o=new m({body:d,details:r.message,url:c})}}throw o}export{A as ccipFetch,j as offchainLookup,S as offchainLookupAbiItem,T as offchainLookupSignature};
